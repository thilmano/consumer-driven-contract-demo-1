"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var arguments_1 = require("./arguments");
var expect = chai.expect;
chai.use(chaiAsPromised);
describe('Pact Util Spec', function () {
    describe('toArgumentsArray', function () {
        describe('when called with an object', function () {
            it('should return an array of all arguments', function () {
                var result = arguments_1.default.toArgumentsArray({ providerBaseUrl: 'http://localhost' }, { providerBaseUrl: '--provider-base-url' });
                expect(result)
                    .to.be.an('array')
                    .that.includes('--provider-base-url');
                expect(result.length).to.be.equal(2);
            });
            it('should wrap its argument values in quotes', function () {
                var result = arguments_1.default.toArgumentsArray({
                    providerBaseUrl: 'http://localhost',
                    pactUrls: ['http://idontexist'],
                }, {
                    providerBaseUrl: '--provider-base-url',
                    pactUrls: '--pact-urls',
                });
                expect(result).to.include('--provider-base-url');
                expect(result).to.include('http://localhost');
                expect(result).to.include('--pact-urls');
                expect(result).to.include('http://idontexist');
            });
            describe("and the argument's value is also an object", function () {
                it('should serialise the argument value to a JSON string', function () {
                    var result = arguments_1.default.toArgumentsArray({
                        consumerVersionSelectors: [
                            {
                                all: true,
                                tag: 'prod',
                            },
                            {
                                tag: 'bar',
                            },
                        ],
                    }, { consumerVersionSelectors: '--consumer-version-selector' });
                    expect(result)
                        .to.be.an('array')
                        .that.includes('--consumer-version-selector')
                        .and.includes('{"all":true,"tag":"prod"}')
                        .and.includes('{"tag":"bar"}');
                    expect(result.length).to.be.equal(4);
                });
            });
        });
        describe('when called with an array', function () {
            describe('with one element', function () {
                it('should return an array of all arguments', function () {
                    var result = arguments_1.default.toArgumentsArray([{ providerBaseUrl: 'http://localhost' }], {
                        providerBaseUrl: '--provider-base-url',
                    });
                    expect(result)
                        .to.be.an('array')
                        .that.includes('--provider-base-url');
                    expect(result.length).to.be.equal(2);
                });
                it('should produce correct arguments array', function () {
                    var result = arguments_1.default.toArgumentsArray([
                        {
                            providerBaseUrl: 'http://localhost',
                            pactUrls: ['http://idontexist'],
                        },
                    ], {
                        providerBaseUrl: '--provider-base-url',
                        pactUrls: '--pact-urls',
                    });
                    expect(result).to.include('--provider-base-url');
                    expect(result).to.include('http://localhost');
                    expect(result).to.include('--pact-urls');
                    expect(result).to.include('http://idontexist');
                });
            });
            describe('with multiple elements', function () {
                it('should produce correct arguments array', function () {
                    var result = arguments_1.default.toArgumentsArray([
                        { participant: 'one' },
                        { version: 'v1' },
                        { participant: 'two' },
                        { version: 'v2' },
                    ], { version: '--version', participant: '--participant' });
                    expect(result).to.be.an('array');
                    expect(result).to.eql([
                        '--participant',
                        'one',
                        '--version',
                        'v1',
                        '--participant',
                        'two',
                        '--version',
                        'v2',
                    ]);
                });
            });
            describe("and an argument's value is an object", function () {
                it('should serialise the argument value to a JSON string', function () {
                    var result = arguments_1.default.toArgumentsArray([
                        {
                            consumerVersionSelectors: [
                                {
                                    all: true,
                                    tag: 'prod',
                                },
                            ],
                        },
                        {
                            consumerVersionSelectors: [
                                {
                                    tag: 'foo',
                                },
                            ],
                        },
                    ], { consumerVersionSelectors: '--consumer-version-selector' });
                    expect(result)
                        .to.be.an('array')
                        .that.includes('--consumer-version-selector')
                        .and.includes('{"all":true,"tag":"prod"}')
                        .and.includes('{"tag":"foo"}');
                    expect(result.length).to.be.equal(4);
                });
            });
        });
        it('should make DEFAULT values first, everything else after', function () {
            var result = arguments_1.default.toArgumentsArray({
                providerBaseUrl: 'http://localhost',
                pactUrls: ['http://idontexist'],
            }, {
                providerBaseUrl: '--provider-base-url',
                pactUrls: arguments_1.DEFAULT_ARG,
            });
            expect(result.length).to.be.equal(3);
            expect(result[0]).to.be.equal('http://idontexist');
        });
    });
});
//# sourceMappingURL=arguments.spec.js.map