"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var can_deploy_1 = require("./can-deploy");
var logger_1 = require("./logger");
var broker_mock_1 = require("../test/integration/broker-mock");
var rimraf = require("rimraf");
var mkdirp = require("mkdirp");
var expect = chai.expect;
chai.use(chaiAsPromised);
describe('CanDeploy Spec', function () {
    var PORT = Math.floor(Math.random() * 999) + 9000;
    var server;
    var absolutePath;
    var relativePath;
    before(function () {
        return broker_mock_1.default(PORT).then(function (s) {
            logger_1.default.debug("Pact Broker Mock listening on port: " + PORT);
            server = s;
        });
    });
    after(function () { return server.close(); });
    beforeEach(function () {
        relativePath = ".tmp/" + Math.floor(Math.random() * 1000);
        absolutePath = path.resolve(__dirname, '..', relativePath);
        mkdirp.sync(absolutePath);
    });
    afterEach(function () {
        if (fs.existsSync(absolutePath)) {
            rimraf.sync(absolutePath);
        }
    });
    describe('convertForSpawnBinary helper function', function () {
        it('produces an array of SpawnArguments', function () {
            var value = { pactBroker: 'some broker', pacticipants: [] };
            var result = can_deploy_1.CanDeploy.convertForSpawnBinary(value);
            expect(result).to.be.an('array');
            expect(result.length).to.be.equal(1);
            expect(result).to.be.deep.equal([{ pactBroker: 'some broker' }]);
        });
        it('has version and participant in the right order', function () {
            var result = can_deploy_1.CanDeploy.convertForSpawnBinary({
                pacticipants: [{ version: 'v2', name: 'one' }],
                pactBroker: 'some broker',
                pactBrokerUsername: 'username',
                pactBrokerPassword: 'password',
            });
            expect(result).to.eql([
                {
                    pactBroker: 'some broker',
                    pactBrokerUsername: 'username',
                    pactBrokerPassword: 'password',
                },
                { name: 'one' },
                { version: 'v2' },
            ]);
        });
        it('has latest tag and participant in the right order', function () {
            var result = can_deploy_1.CanDeploy.convertForSpawnBinary({
                pacticipants: [{ name: 'two', latest: 'SOME_TAG' }],
                pactBroker: 'some broker',
            });
            expect(result).to.eql([
                {
                    pactBroker: 'some broker',
                },
                { name: 'two' },
                { latest: 'SOME_TAG' },
            ]);
        });
        it("understands 'true' for latest", function () {
            var result = can_deploy_1.CanDeploy.convertForSpawnBinary({
                pacticipants: [{ name: 'two', latest: true }],
                pactBroker: 'some broker',
            });
            expect(result).to.eql([
                {
                    pactBroker: 'some broker',
                },
                { name: 'two' },
                { latest: 'PACT_NODE_NO_VALUE' },
            ]);
        });
    });
    context('when invalid options are set', function () {
        it('should fail with an Error when not given pactBroker', function () {
            expect(function () { return can_deploy_1.default({}); }).to.throw(Error);
        });
        it('should fail with an error when there are no paticipants', function () {
            expect(function () {
                return can_deploy_1.default({
                    pactBroker: 'http://localhost',
                    pacticipants: [],
                });
            }).to.throw(Error);
        });
    });
    context('when valid options are set', function () {
        it('should return a CanDeploy object when given the correct arguments', function () {
            var c = can_deploy_1.default({
                pactBroker: 'http://localhost',
                pacticipants: [{ name: 'two', version: '2' }],
            });
            expect(c).to.be.ok;
            expect(c.canDeploy).to.be.a('function');
        });
    });
    context('candeploy function', function () {
        it('should return success with a table result deployable true', function (done) {
            var opts = {
                pactBroker: "http://localhost:" + PORT,
                pacticipants: [{ name: 'Foo', version: '4' }],
            };
            var ding = can_deploy_1.default(opts);
            ding.canDeploy().then(function (results) {
                expect(results).not.to.be.null;
                done();
            });
        });
        context('with latest true', function () {
            it('should return success with a table result deployable true', function (done) {
                var opts = {
                    pactBroker: "http://localhost:" + PORT,
                    pacticipants: [{ name: 'Foo', latest: true }],
                };
                var ding = can_deploy_1.default(opts);
                ding.canDeploy().then(function (results) {
                    expect(results).not.to.be.null;
                    done();
                });
            });
            it('should throw an error with a table result deployable false', function () {
                var opts = {
                    pactBroker: "http://localhost:" + PORT,
                    pacticipants: [{ name: 'FooFail', latest: true }],
                };
                var ding = can_deploy_1.default(opts);
                return ding
                    .canDeploy()
                    .then(function () { return expect.fail(); })
                    .catch(function (message) { return expect(message).not.be.null; });
            });
        });
        context('with latest a string', function () {
            it('should return success with a table result deployable true', function (done) {
                var opts = {
                    pactBroker: "http://localhost:" + PORT,
                    pacticipants: [{ name: 'Foo', latest: 'tag' }],
                };
                var ding = can_deploy_1.default(opts);
                ding.canDeploy().then(function (results) {
                    expect(results).not.to.be.null;
                    done();
                });
            });
            it('should throw an error with a table result deployable false', function () {
                var opts = {
                    pactBroker: "http://localhost:" + PORT,
                    pacticipants: [{ name: 'FooFail', latest: 'tag' }],
                };
                var ding = can_deploy_1.default(opts);
                return ding
                    .canDeploy()
                    .then(function () { return expect.fail(); })
                    .catch(function (message) { return expect(message).not.be.null; });
            });
        });
        context('with latest a string, and a to', function () {
            it('should return success with a table result deployable true', function (done) {
                var opts = {
                    pactBroker: "http://localhost:" + PORT,
                    pacticipants: [{ name: 'Foo', latest: 'tag' }],
                    to: 'prod',
                };
                var ding = can_deploy_1.default(opts);
                ding.canDeploy().then(function (results) {
                    expect(results).not.to.be.null;
                    done();
                });
            });
            it('should throw an error with a table result deployable false', function () {
                var opts = {
                    pactBroker: "http://localhost:" + PORT,
                    pacticipants: [{ name: 'FooFail', latest: 'tag' }],
                    to: 'prod',
                };
                var ding = can_deploy_1.default(opts);
                return ding
                    .canDeploy()
                    .then(function () { return expect.fail(); })
                    .catch(function (message) { return expect(message).not.be.null; });
            });
        });
        it('should throw an error with a table result deployable false', function () {
            var opts = {
                pactBroker: "http://localhost:" + PORT,
                pacticipants: [{ name: 'FooFail', version: '4' }],
            };
            var ding = can_deploy_1.default(opts);
            return ding
                .canDeploy()
                .then(function () { return expect.fail(); })
                .catch(function (message) { return expect(message).not.be.null; });
        });
        it('should return success with a json result deployable true', function (done) {
            var opts = {
                pactBroker: "http://localhost:" + PORT,
                pacticipants: [{ name: 'Foo', version: '4' }],
                output: 'json',
            };
            var ding = can_deploy_1.default(opts);
            ding.canDeploy().then(function (results) {
                expect(results).not.to.be.null;
                done();
            });
        });
        it('should throw an error with a json result deployable false', function () {
            var opts = {
                pactBroker: "http://localhost:" + PORT,
                pacticipants: [{ name: 'FooFail', version: '4' }],
                output: 'json',
            };
            var ding = can_deploy_1.default(opts);
            return ding
                .canDeploy()
                .then(function () { return expect.fail(); })
                .catch(function (message) { return expect(message).not.be.null; });
        });
    });
});
//# sourceMappingURL=can-deploy.spec.js.map